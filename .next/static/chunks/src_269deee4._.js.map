{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/seed-story.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates an initial story seed based on the selected theme and arc type.\n *\n * - seedStory - A function that generates the initial story seed.\n * - SeedStoryInput - The input type for the seedStory function.\n * - SeedStoryOutput - The return type for the seedStory function.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\n\nconst SeedStoryInputSchema = z.object({\n  theme: z.string().describe('The theme of the story (e.g., space, fantasy, horror).'),\n  arcType: z.string().describe('The desired story arc (e.g., hero-journey, romance).')\n});\nexport type SeedStoryInput = z.infer<typeof SeedStoryInputSchema>;\n\nconst SeedStoryOutputSchema = z.object({\n  storySeed: z.string().describe('The initial story seed generated based on the theme and arc type.'),\n  initialChoices: z.array(z.string()).optional().describe('Initial choices for the user to select from.'),\n});\nexport type SeedStoryOutput = z.infer<typeof SeedStoryOutputSchema>;\n\nexport async function seedStory(input: SeedStoryInput): Promise<SeedStoryOutput> {\n  return seedStoryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'seedStoryPrompt',\n  input: {\n    schema: z.object({\n      theme: z.string().describe('The theme of the story.'),\n      arcType: z.string().describe('The desired story arc (e.g., hero-journey, romance).')\n    }),\n  },\n  output: {\n    schema: z.object({\n      storySeed: z.string().describe('The initial story seed.'),\n      initialChoices: z.array(z.string()).describe('Three initial choices for the player.'),\n    }),\n  },\n  prompt: `You are a creative story writer crafting the opening scene of a unique, interactive choose-your-own-adventure story.\n\nThe **theme** of the story is: {{{theme}}}  \nThe **narrative arc** follows the structure of: {{{arcType}}}  \n\nWrite a highly original **story seed** that meets the following:\n\n- **Length**: 300–450 words (~2000–2800 characters)\n- **Hook**: Begin with a vivid, surprising, or emotionally charged event or moment that immediately draws the player into the story world.\n- **Worldbuilding**: Establish a unique and immersive setting that clearly reflects the chosen **theme** (e.g., sci-fi, horror, pirate fantasy).\n- **Arc Signal**: Introduce an inciting incident or scenario that **naturally aligns with the beginning of the {{{arcType}}} arc** (e.g., call to adventure, moral dilemma, rising tension).\n- **Tone & Atmosphere**: Use imagery, sensory language, and mood appropriate to the theme and arc.\n- **Perspective**: Write entirely in **second-person** (“you”) to make the player feel like the protagonist.\n- **Decision Point**: End the scene at a clear moment where the player must make a pivotal first choice.\n\nAfter the story seed, provide **exactly three distinct next actions** the player can take. Each choice must:\n\n- Be **concise** (max 8 words)\n- Be **meaningfully different** (e.g., risky, cautious, curious)\n- Reflect a **believable reaction** in the context of the story\n- Propel the narrative forward in a way consistent with the chosen arc\n\nExample (for a fantasy \"hero's journey\" story):  \n- \"Open the glowing ancient tome\"  \n- \"Sneak out of the library\"  \n- \"Call for the headmaster\"\n\nMake each story seed **feel handcrafted** for the unique combination of {{{theme}}} and {{{arcType}}}.  \nAvoid clichés or generic setups — prioritize **novelty, specificity, and immersive tension**.`,\n});\n\nconst seedStoryFlow = ai.defineFlow<\n  typeof SeedStoryInputSchema,\n  typeof SeedStoryOutputSchema\n>(\n  {\n    name: 'seedStoryFlow',\n    inputSchema: SeedStoryInputSchema,\n    outputSchema: SeedStoryOutputSchema,\n  },\n  async input => {\n    const { output } = await prompt(input);\n\n    if (!output || !output.initialChoices || !Array.isArray(output.initialChoices) || output.initialChoices.length === 0) {\n      return {\n        storySeed: output?.storySeed || \"Your adventure begins...\",\n        initialChoices: [\n          \"Explore the surroundings\",\n          \"Continue forward\",\n          \"Go back\"\n        ]\n      };\n    }\n\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;IAwBsB","debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-story-snippet.ts"],"sourcesContent":["// This file is generated by Firebase Studio.\n'use server';\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateStorySnippetInputSchema = z.object({\n  theme: z.string().describe('The theme of the story (e.g., space, fantasy, horror).'),\n  arcType: z.string().describe('The desired story arc (e.g., hero-journey, romance).'),\n  previousSnippets: z.array(z.string()).describe('An array of previous story snippets.'),\n  currentChoice: z.string().describe(\"The user's current choice that influences the story.\"),\n  currentPhase: z.string().describe('The current phase of the story arc (e.g., setup, rising action).'),\n  progress: z.number().describe('The overall progress percentage through the story arc (0-100).'),\n  isStoryComplete: z.boolean().optional().describe('Flag indicating if the story should conclude.') // Added optional flag to indicate story completion\n});\nexport type GenerateStorySnippetInput = z.infer<typeof GenerateStorySnippetInputSchema>;\n\nconst GenerateStorySnippetOutputSchema = z.object({\n  nextSnippet: z.string().describe('The next story snippet generated by the LLM.'),\n  nextChoices: z.array(z.string()).describe('The next set of choices for the user to pick from.'),\n  isStoryComplete: z.boolean().optional().describe('Whether the AI determines the story has reached a natural conclusion.')\n});\nexport type GenerateStorySnippetOutput = z.infer<typeof GenerateStorySnippetOutputSchema>;\n\nexport async function generateStorySnippet(input: GenerateStorySnippetInput): Promise<GenerateStorySnippetOutput> {\n  return generateStorySnippetFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateStorySnippetPrompt',\n  input: {\n    schema: z.object({\n      theme: z.string().describe('The theme of the story.'),\n      arcType: z.string().describe('The desired story arc.'),\n      previousSnippets: z.array(z.string()).describe('Previous story snippets.'),\n      currentChoice: z.string().describe(\"The user's current choice.\"),\n      currentPhase: z.string().describe('The current phase of the story arc.'),\n      progress: z.number().describe('The overall progress percentage (0-100).'),\n      isStoryComplete: z.boolean().optional().describe('Whether the story should conclude.')\n    }),\n  },\n  output: {\n    schema: z.object({\n      nextSnippet: z.string().describe('The next story snippet.'),\n      nextChoices: z.array(z.string()).describe('Three possible choices for the user to continue the story.'),\n      isStoryComplete: z.boolean().optional().describe('Whether the story has concluded naturally.')\n    }),\n  },\n  prompt: `You are an AI Dungeon Master, weaving a choose-your-own-adventure story.\n\nThe theme of the story is: {{{theme}}}\nThe desired story arc is: {{{arcType}}}\nThe story is currently in the {{{currentPhase}}} phase ({{progress}}% complete).\n\nPrevious story snippets:\n{{#each previousSnippets}}\n{{{this}}}\n{{/each}}\n\nThe user has chosen: {{{currentChoice}}}\n\n{{#if isStoryComplete}}\nGenerate a concluding snippet for the story. This should provide a satisfying resolution based on the arc, theme, and previous choices. Do not provide any further choices. Mark the snippet with \"THE END\".\n{{else}}\nGenerate the next part of the story based on the user's choice. Your response must include:\n1. A story snippet (nextSnippet) that continues the narrative using **300-450 words** (approximately 2000-2800 characters), ensuring it aligns with the {{{arcType}}} and the {{{currentPhase}}} of the story. Advance the plot meaningfully.\n2. Exactly three choices (nextChoices) for what the user could do next. These choices should be concise (max 8 words) and propel the story forward along the {{{arcType}}}.\n{{/if}}\n\nMake your story engaging and immersive. Use vivid imagery, sensory detail, and write in second person (\"you\"). Build tension or wonder as appropriate to the theme and arc. If the current phase is 'climax', make the situation very intense. If the phase is 'resolution', begin to wrap up the story threads.\nIf you feel the story has reached a natural and satisfying conclusion based on the arc and progress, even if not explicitly told to end, you can choose to write a concluding snippet and set isStoryComplete to true in the output.`, // Added conditional prompt for conclusion and guidance on phases\n});\n\nconst generateStorySnippetFlow = ai.defineFlow<\n  typeof GenerateStorySnippetInputSchema,\n  typeof GenerateStorySnippetOutputSchema\n>(\n  {\n    name: 'generateStorySnippetFlow',\n    inputSchema: GenerateStorySnippetInputSchema,\n    outputSchema: GenerateStorySnippetOutputSchema,\n  },\n  async input => {\n    try {\n      const { output } = await prompt(input);\n\n      if (!output || !output.nextSnippet || output.nextSnippet.trim() === '') {\n        console.error('Error: No valid story snippet returned from AI');\n        return {\n          nextSnippet: \"As you make your choice, the story continues...\",\n          nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']\n        };\n      }\n\n      // Handle case where story should complete (either by input flag or AI decision)\n      if (input.isStoryComplete || output.isStoryComplete) {\n        console.log('Story completion triggered.', { inputFlag: input.isStoryComplete, outputFlag: output.isStoryComplete });\n        return {\n          // Corrected line 99:\n          nextSnippet: output.nextSnippet.includes(\"THE END\")\n  ? output.nextSnippet\n  : `${output.nextSnippet}\\n\\nTHE END.`,\n\n          nextChoices: [], // No choices on completion\n          isStoryComplete: true\n        };\n      }\n\n      // Validate choices if story is not complete\n      if (!output.nextChoices || !Array.isArray(output.nextChoices) || output.nextChoices.length === 0) {\n        console.error('Error: No valid choices returned from AI for ongoing story');\n        return {\n          nextSnippet: output.nextSnippet,\n          nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']\n        };\n      }\n\n      // Ensure exactly 3 choices\n      const choices = output.nextChoices.slice(0, 3);\n      while (choices.length < 3) {\n        choices.push([\"Explore further\", \"Look around\", \"Continue onward\"][choices.length]);\n      }\n\n      console.log('Story snippet generated successfully:', {\n        snippetLength: output.nextSnippet.length,\n        choices: choices,\n        isStoryComplete: output.isStoryComplete ?? false\n      });\n\n      return {\n        nextSnippet: output.nextSnippet,\n        nextChoices: choices,\n        isStoryComplete: output.isStoryComplete ?? false\n      };\n    } catch (error) {\n      console.error('Error in generateStorySnippetFlow:', error);\n      return {\n        nextSnippet: \"There was a glitch in your story. The adventure continues...\",\n        nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']\n      };\n    }\n  }\n);\n"],"names":[],"mappings":"AAAA,6CAA6C;;;;;;IAwBvB","debugId":null}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,6LAAC,6KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,6KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC,6KAAA,CAAA,SAA0B;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,6KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,6LAAC,6KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,6KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,6KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI/B,CACE,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO,EACtE,oBAEA,6LAAC,wKAAA,CAAA,OAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;AAIf,UAAU,WAAW,GAAG,wKAAA,CAAA,OAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG9B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,6LAAC,uKAAA,CAAA,OAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,uKAAA,CAAA,OAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 597, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport {seedStory} from '@/ai/flows/seed-story';\nimport {generateStorySnippet} from '@/ai/flows/generate-story-snippet';\nimport {Button} from '@/components/ui/button';\nimport { Moon, Sun, Loader2, RefreshCw } from 'lucide-react';\nimport {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';\nimport {Select, SelectContent, SelectItem, SelectTrigger, SelectValue} from '@/components/ui/select';\nimport {ScrollArea} from '@/components/ui/scroll-area';\nimport {Separator} from '@/components/ui/separator';\nimport {Progress} from '@/components/ui/progress';\n\nconst themes = ['space', 'fantasy', 'horror'];\nconst arcTypes = ['hero-journey', 'mystery', 'quest', 'revenge', 'romance'];\n\n// Define story phases and their progression percentages\nconst storyPhases = [\n  { name: 'setup', maxProgress: 15 },\n  { name: 'rising action', maxProgress: 40 },\n  { name: 'confrontation', maxProgress: 65 },\n  { name: 'climax', maxProgress: 85 },\n  { name: 'resolution', maxProgress: 100 }\n];\n\n// Define progression points - how many choices to advance each phase\nconst choicesPerPhase = {\n  'setup': 5, // 5 choices to complete setup\n  'rising action': 10, // 10 more choices for rising action\n  'confrontation': 10, // 10 more choices for confrontation\n  'climax': 5, // 5 more choices for climax\n  'resolution': 5 // 5 final choices to reach conclusion\n};\n\n// Total choices for a complete story\nconst totalStoryChoices = Object.values(choicesPerPhase).reduce((sum, val) => sum + val, 0);\n\nexport default function Home() {\n  const [theme, setTheme] = useState(themes[0]);\n  const [arcType, setArcType] = useState(arcTypes[0]);\n  const [displayedSnippets, setDisplayedSnippets] = useState<string[]>([]);\n  const [storySnippets, setStorySnippets] = useState<string[]>([]);\n  const [choices, setChoices] = useState<string[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [storyInitialized, setStoryInitialized] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [arcProgress, setArcProgress] = useState(0);\n  const [storyPhase, setStoryPhase] = useState<string>('setup');\n  const [storyComplete, setStoryComplete] = useState(false);\n  const [choicesMade, setChoicesMade] = useState(0);\n  \n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  // Check system preference for dark mode on initial load\n  useEffect(() => {\n    const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    setIsDarkMode(prefersDarkMode);\n  }, []);\n\n  // Apply dark mode class when isDarkMode changes\n  useEffect(() => {\n    const root = window.document.documentElement;\n    if (isDarkMode) {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n  }, [isDarkMode]);\n\n  const toggleDarkMode = () => setIsDarkMode(!isDarkMode);\n\n  // Initialize story based on selected theme and arc type\n  useEffect(() => {\n    const initializeStory = async () => {\n      setLoading(true);\n      setError(null);\n      setArcProgress(0);\n      setStoryPhase('setup');\n      setStoryComplete(false);\n      setChoicesMade(0);\n      \n      try {\n        // Pass arc type to seed story\n        const initialStory = await seedStory({theme, arcType});\n        \n        // Use AI-generated choices from seedStory if available, otherwise use fallback choices\n        const initialChoices = initialStory.initialChoices || ['Explore the surroundings', 'Continue forward', 'Go back'];\n        \n        setStorySnippets([initialStory.storySeed]);\n        setDisplayedSnippets([initialStory.storySeed]);\n        setChoices(initialChoices);\n        setStoryInitialized(true);\n        \n        console.log('Story initialized:', {\n          snippet: initialStory.storySeed,\n          choices: initialChoices,\n          arcType\n        });\n      } catch (e: any) {\n        setError(e.message || 'Failed to seed story.');\n        console.error('Failed to seed story:', e);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (!storyInitialized) {\n      initializeStory();\n    }\n  }, [theme, arcType, storyInitialized]);\n\n  // Modified typewriter effect to handle updates more reliably\n  useEffect(() => {\n    if (storySnippets.length > 0 && \n       (displayedSnippets.length === 0 || storySnippets.length > displayedSnippets.length)) {\n      \n      // Get the latest snippet that needs to be displayed\n      const lastSnippetIndex = storySnippets.length - 1;\n      const newSnippet = storySnippets[lastSnippetIndex];\n      \n      // Create a temporary array that matches the current state but with placeholders for new content\n      let updatedSnippets = [...storySnippets.slice(0, lastSnippetIndex)];\n      \n      // Start with empty string for the new snippet\n      updatedSnippets.push('');\n      setDisplayedSnippets(updatedSnippets);\n      \n      // Animate the text\n      let currentText = '';\n      let index = 0;\n      const timer = setInterval(() => {\n        if (index < newSnippet.length) {\n          currentText = newSnippet.substring(0, index + 1);\n          updatedSnippets = [...storySnippets.slice(0, lastSnippetIndex), currentText];\n          setDisplayedSnippets(updatedSnippets);\n          index++;\n        } else {\n          clearInterval(timer);\n          setDisplayedSnippets([...storySnippets]);\n          console.log('Typewriter effect completed for snippet:', lastSnippetIndex);\n        }\n      }, 20); // Slightly faster typing for better UX\n      \n      return () => clearInterval(timer);\n    }\n  }, [storySnippets]);\n\n  // Auto-scroll to bottom when content changes\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollElement = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollElement) {\n        scrollElement.scrollTop = scrollElement.scrollHeight;\n      }\n    }\n  }, [displayedSnippets]);\n\n  // Update story phase and progress based on choices made\n  useEffect(() => {\n    if (storyComplete) return;\n    \n    // Calculate story progress based on choices made\n    const progressPercentage = Math.min(Math.floor((choicesMade / totalStoryChoices) * 100), 100);\n    \n    // Set the current phase based on progress\n    let currentPhaseIndex = 0;\n    let cumulativeChoices = 0;\n    \n    for (let i = 0; i < Object.keys(choicesPerPhase).length; i++) {\n      const phaseName = Object.keys(choicesPerPhase)[i];\n      const phaseChoices = choicesPerPhase[phaseName as keyof typeof choicesPerPhase];\n      \n      cumulativeChoices += phaseChoices;\n      if (choicesMade < cumulativeChoices) {\n        currentPhaseIndex = i;\n        break;\n      }\n    }\n    \n    // If we've gone through all choices, set to the last phase\n    if (choicesMade >= totalStoryChoices) {\n      currentPhaseIndex = storyPhases.length - 1;\n    }\n    \n    // Set the current phase and progress\n    const newPhase = storyPhases[currentPhaseIndex].name;\n    setStoryPhase(newPhase);\n    setArcProgress(progressPercentage);\n    \n    // Check if we should end the story\n    if (progressPercentage >= 100) {\n      console.log('Story progress reached 100%');\n    }\n    \n  }, [choicesMade, storyComplete]);\n\n  const handleChoice = async (choice: string) => {\n    if(loading) {\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    console.log('User selected choice:', choice);\n    \n    // Add the user choice to the story right away\n    const choiceText = `You chose: ${choice}`;\n    setStorySnippets([...storySnippets, choiceText]);\n    \n    // Increment choices made\n    const newChoicesMade = choicesMade + 1;\n    setChoicesMade(newChoicesMade);\n    \n    // Check if we've reached the total story length\n    const newProgressPercentage = Math.min(Math.floor((newChoicesMade / totalStoryChoices) * 100), 100);\n    const shouldEndStory = newProgressPercentage >= 100;\n    \n    try {\n      const newSnippet = await generateStorySnippet({\n        theme,\n        arcType,\n        previousSnippets: storySnippets,\n        currentChoice: choice,\n        currentPhase: storyPhase,\n        progress: newProgressPercentage,\n      });\n      \n      console.log('Generated new snippet:', {\n        snippetLength: newSnippet.nextSnippet.length,\n        choices: newSnippet.nextChoices,\n        storyPhase,\n        progress: newProgressPercentage,\n        choicesMade: newChoicesMade,\n        totalChoices: totalStoryChoices\n      });\n      \n      // Only add the new snippet after the choice was displayed\n      setStorySnippets(prevSnippets => [...prevSnippets, newSnippet.nextSnippet]);\n      \n      // Check if story is complete (either from AI signal or from our progress calculation)\n      if (newSnippet.isStoryComplete || shouldEndStory) {\n        handleStoryCompletion();\n        return;\n      }\n      \n      // Set new choices, ensuring we always have an array\n      if (newSnippet.nextChoices && Array.isArray(newSnippet.nextChoices) && newSnippet.nextChoices.length > 0) {\n        setChoices(newSnippet.nextChoices);\n      } else {\n        // Fallback choices if API doesn't return any\n        setChoices(['Explore further', 'Talk to someone nearby', 'Change direction']);\n        console.warn('No choices returned from API, using fallback choices');\n      }\n    } catch (e: any) {\n      setError(e.message || 'Failed to generate next snippet.');\n      console.error('Failed to generate next snippet:', e);\n      \n      // Add an error message to the story\n      setStorySnippets(prevSnippets => [\n        ...prevSnippets, \n        \"There was a problem continuing your adventure. Please try again.\"\n      ]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle story completion\n  const handleStoryCompletion = async () => {\n    try {\n      // Generate a final ending snippet if needed\n      if (arcProgress < 100) {\n        setArcProgress(100);\n      }\n      \n      // Add a closing message if the story didn't provide one\n      setStorySnippets(prevSnippets => {\n        const lastSnippet = prevSnippets[prevSnippets.length - 1];\n        if (!lastSnippet.includes(\"THE END\") && !lastSnippet.includes(\"The End\")) {\n          return [...prevSnippets, \"\\n\\nYour journey has reached its conclusion. THE END.\"];\n        }\n        return prevSnippets;\n      });\n      \n      setStoryComplete(true);\n      setChoices([]);\n      setStoryPhase('complete');\n      \n    } catch (e) {\n      console.error('Error completing story:', e);\n    }\n  };\n\n  const handleThemeChange = (newTheme: string) => {\n    setTheme(newTheme);\n    resetStory();\n  };\n\n  const handleArcTypeChange = (newArcType: string) => {\n    setArcType(newArcType);\n    resetStory();\n  };\n\n  const resetStory = () => {\n    setStorySnippets([]);\n    setDisplayedSnippets([]);\n    setChoices([]);\n    setStoryInitialized(false);\n    setArcProgress(0);\n    setStoryPhase('setup');\n    setStoryComplete(false);\n    setChoicesMade(0);\n  }\n\n  // Get story phase label\n  const getPhaseLabel = (phase: string) => {\n    return phase.charAt(0).toUpperCase() + phase.slice(1);\n  };\n\n  // Get arc type display name\n  const getArcTypeDisplayName = (type: string) => {\n    return type.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n\n  // Calculate estimated remaining choices\n  const getRemainingChoices = () => {\n    return Math.max(0, totalStoryChoices - choicesMade);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen py-2 bg-background\">\n      {/* Dark Mode Toggle */}\n      <div className=\"absolute top-4 right-4\">\n        <Button\n          onClick={toggleDarkMode}\n          variant=\"ghost\"\n          className=\"w-9 p-0\"\n          aria-label=\"Toggle Dark Mode\"\n        >\n          {isDarkMode ? <Sun size={20} /> : <Moon size={20} />}\n          <span className=\"sr-only\">Toggle Dark Mode</span>\n        </Button>\n      </div>\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <Card className=\"w-full max-w-3xl mx-auto my-10 rounded-lg shadow-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-semibold tracking-tight\">Story Weaver</CardTitle>\n            <CardDescription>Create your own adventure with AI.</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-wrap items-center gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <label htmlFor=\"theme\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                  Theme:\n                </label>\n                <Select value={theme} onValueChange={handleThemeChange} disabled={loading}>\n                  <SelectTrigger className=\"w-[120px]\" id=\"theme\">\n                    <SelectValue placeholder=\"Theme\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {themes.map((t) => (\n                      <SelectItem key={t} value={t}>\n                        {t.charAt(0).toUpperCase() + t.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <label htmlFor=\"arcType\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\n                  Story Arc:\n                </label>\n                <Select value={arcType} onValueChange={handleArcTypeChange} disabled={loading}>\n                  <SelectTrigger className=\"w-[140px]\" id=\"arcType\">\n                    <SelectValue placeholder=\"Arc Type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {arcTypes.map((a) => (\n                      <SelectItem key={a} value={a}>\n                        {getArcTypeDisplayName(a)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={resetStory} \n                disabled={loading}\n                className=\"ml-auto\"\n              >\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                New Story\n              </Button>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>{getPhaseLabel(storyPhase)}</span>\n                <span>{arcProgress}% ({getRemainingChoices()} choices remaining)</span>\n              </div>\n              <Progress value={arcProgress} className=\"h-2\" />\n            </div>\n\n            <Separator />\n\n            {error && (\n              <div className=\"bg-destructive/15 text-destructive p-3 rounded-md text-sm\">\n                {error}\n              </div>\n            )}\n\n            <ScrollArea className=\"h-[300px] rounded-md border p-4\" ref={scrollAreaRef}>\n              {displayedSnippets.map((snippet, index) => (\n                <div key={index} className=\"mb-4 text-sm\">\n                  <p>{snippet}</p>\n                </div>\n              ))}\n              {loading && (\n                <div className=\"flex items-center justify-center py-2\">\n                  <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                  <span className=\"text-sm italic\">Generating story...</span>\n                </div>\n              )}\n            </ScrollArea>\n\n            <div className=\"flex flex-wrap justify-center gap-2 mt-4\">\n              {choices.length > 0 && !storyComplete ? (\n                choices.map((choice) => (\n                  <Button \n                    key={choice} \n                    onClick={() => handleChoice(choice)} \n                    disabled={loading}\n                    className=\"m-1\"\n                  >\n                    {choice}\n                  </Button>\n                ))\n              ) : (\n                storyComplete && (\n                  <div className=\"text-center text-muted-foreground\">\n                    <p className=\"italic mb-2\">The story has reached its conclusion.</p>\n                    <Button \n                      onClick={resetStory} \n                      variant=\"outline\"\n                    >\n                      Start a New Adventure\n                    </Button>\n                  </div>\n                )\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}