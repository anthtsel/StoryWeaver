// This file is generated by Firebase Studio.
'use server';

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateStorySnippetInputSchema = z.object({
  theme: z.string().describe('The theme of the story (e.g., space, fantasy, horror).'),
  previousSnippets: z.array(z.string()).describe('An array of previous story snippets.'),
  currentChoice: z.string().describe('The user\'s current choice that influences the story.'),
});
export type GenerateStorySnippetInput = z.infer<typeof GenerateStorySnippetInputSchema>;

const GenerateStorySnippetOutputSchema = z.object({
  nextSnippet: z.string().describe('The next story snippet generated by the LLM.'),
  nextChoices: z.array(z.string()).describe('The next set of choices for the user to pick from.')
});
export type GenerateStorySnippetOutput = z.infer<typeof GenerateStorySnippetOutputSchema>;

export async function generateStorySnippet(input: GenerateStorySnippetInput): Promise<GenerateStorySnippetOutput> {
  return generateStorySnippetFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateStorySnippetPrompt',
  input: {
    schema: z.object({
      theme: z.string().describe('The theme of the story.'),
      previousSnippets: z.array(z.string()).describe('Previous story snippets.'),
      currentChoice: z.string().describe('The user\'s current choice.'),
    }),
  },
  output: {
    schema: z.object({
      nextSnippet: z.string().describe('The next story snippet.'),
      nextChoices: z.array(z.string()).describe('Three possible choices for the user to continue the story.')
    }),
  },
  prompt: `You are an AI Dungeon Master, weaving a choose-your-own-adventure story.

The theme of the story is: {{{theme}}}

Previous story snippets:
{{#each previousSnippets}}
{{{this}}}
{{/each}}

The user has chosen: {{{currentChoice}}}

Generate the next part of the story based on the user's choice. Your response must include:
1. A story snippet (nextSnippet) that continues the narrative (150-200 words)
2. Exactly three choices (nextChoices) for what the user could do next

Make your story engaging and immersive. Write in second person ("you").`,
});

const generateStorySnippetFlow = ai.defineFlow<
  typeof GenerateStorySnippetInputSchema,
  typeof GenerateStorySnippetOutputSchema
>(
  {
    name: 'generateStorySnippetFlow',
    inputSchema: GenerateStorySnippetInputSchema,
    outputSchema: GenerateStorySnippetOutputSchema,
  },
  async input => {
    try {
      const {output} = await prompt(input);
      
      // Ensure we have a valid story snippet
      if (!output || !output.nextSnippet || output.nextSnippet.trim() === '') {
        console.error('Error: No valid story snippet returned from AI');
        return {
          nextSnippet: "As you make your choice, the story continues...",
          nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']
        };
      }
      
      // Ensure we have valid nextChoices
      if (!output.nextChoices || !Array.isArray(output.nextChoices) || output.nextChoices.length === 0) {
        console.error('Error: No valid choices returned from AI');
        return {
          nextSnippet: output.nextSnippet,
          nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']
        };
      }
      
      // Ensure we have exactly 3 choices
      const choices = output.nextChoices.slice(0, 3);
      while (choices.length < 3) {
        choices.push(["Explore further", "Look around", "Continue onward"][choices.length]);
      }
      
      console.log('Story snippet generated successfully:', {
        snippetLength: output.nextSnippet.length,
        choices: choices
      });
      
      return {
        nextSnippet: output.nextSnippet,
        nextChoices: choices
      };
    } catch (error) {
      console.error('Error in generateStorySnippetFlow:', error);
      return {
        nextSnippet: "There was a glitch in your story. The adventure continues...",
        nextChoices: ['Explore further', 'Talk to someone nearby', 'Change direction']
      };
    }
  }
);